/*********************************************************************
 *
 * Project:      LIN 2.1 driver suite
 *
 * File name:    lin_cfg.h
 *
 * Description:  configuration file for LIN 2.1 driver
 *
 * Copyright:    (c) ST Microelectronics 2009
 *
 * Target:       all
 *
 * This file was automatically generated by
 * lingen 3.5.0.STM built at 14:44:55 on May  7 2010
 * (c) 2009 by STMicroelectronics, Catania
 *
 * Not to be changed by the user!
 *
 *
 *********************************************************************/

/** \file lin_cfg.h
 */

#ifndef LIN_CFG_H
#define LIN_CFG_H

#define LIN_CFG_H_MAJOR_VERSION          3
#define LIN_CFG_H_MINOR_VERSION          5
#define LIN_CFG_H_PATCH_VERSION          0

#define LIN_CFG_H_STM

/*
 * include files
 */
#include "lin_cfg_types.h"
#include "lin_types.h"
#include "lin_def_arch_include.h"
#include "lin_def.h"
#include "lin_def_gen.h"
#include "lin_diag_slave.h"

#ifdef LIN_VERSION_CONTROL_H
  #error "lin_version_control.h shall not be included in h-files and shall be the last file to be included in a c-file!"
#endif /* LIN_VERSION_CONTROL_H */

/*
 * declaration of functions
 */
STACK extern void l_serialErrorFrameBody(__OPTIONAL_IFC_DEFINITION_COMMA__ l_u8 status);

STACK extern void l_stateSendData(__OPTIONAL_IFC_DEFINITION_COMMA__ l_u8 rxChar);

STACK extern void l_stateReceiveData(__OPTIONAL_IFC_DEFINITION_COMMA__ l_u8 rxChar);

STACK extern void l_stateReceiveIdentifier(__OPTIONAL_IFC_DEFINITION_COMMA__ l_u8 rxChar);


/*
 * declaration of external variables
 */
LIN_ZERO_PAGE15 extern l_u8                      l_pFrameId[LIN_FRAME_COUNT];
extern const l_u16                               l_pMessageId[LIN_FRAME_COUNT];
extern const l_u8                                l_pConfigFrameOrder[LIN_FRAME_COUNT];
LIN_ZERO_PAGE14 extern l_u8                      l_pFrameBuf[LIN_FRAME_BUF_SIZE];
LIN_ZERO_PAGE11 extern l_u8                      l_pTxFlagData[LIN_TRANSMIT_FLAG_DATA_SIZE];
LIN_ZERO_PAGE12 extern l_u8                      l_pRxFlagData[LIN_TRANSMIT_FLAG_DATA_SIZE];
LIN_ZERO_PAGE13 extern l_u8                      l_pChangedFlagData[LIN_CHANGED_FLAG_DATA_SIZE];
extern l_productId_t                             l_productId;
extern l_u8                                      l_initialNad;
extern l_u8                                      l_configuredNad;
extern l_u16                                     l_P2_min;
extern l_u16                                     l_ST_min;
extern l_u16                                     l_N_As_timeout;
extern l_u16                                     l_N_Cr_timeout;
/*
 * write mapping of dynamic functions
 * (needed internally)
 */
#define l_bool_rd(SIGNAL) l_bool_rd_##SIGNAL()
#define l_bool_wr(SIGNAL, A) l_bool_wr_##SIGNAL(A)
#define l_u8_rd(SIGNAL) l_u8_rd_##SIGNAL()
#define l_u8_wr(SIGNAL, A) l_u8_wr_##SIGNAL(A)
#define l_u16_rd(SIGNAL) l_u16_rd_##SIGNAL()
#define l_u16_wr(SIGNAL, A) l_u16_wr_##SIGNAL(A)
#define l_bytes_rd(SIGNAL, start, count, data)  l_bytes_rd_##SIGNAL(start, count, data)
#define l_bytes_wr(SIGNAL, start, count, data) l_bytes_wr_##SIGNAL(start, count, data)
#define l_flg_tst(FLAG) l_flg_tst_##FLAG()
#define l_flg_clr(FLAG) l_flg_clr_##FLAG()


/*
 * defines for signal access
 */
#define LIN_BYTE_OFFSET_CCU_ConsoleIndicationLampMode    0
#define LIN_BIT_OFFSET_CCU_ConsoleIndicationLampMode    0
#define LIN_SIGNAL_SIZE_CCU_ConsoleIndicationLampMode    3

#define LIN_BYTE_OFFSET_CLM_ConsoleLampModuleHardwareVersion    2
#define LIN_BIT_OFFSET_CLM_ConsoleLampModuleHardwareVersion    0
#define LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleHardwareVersion    16

#define LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSoftwareVersion    4
#define LIN_BIT_OFFSET_CLM_ConsoleLampModuleSoftwareVersion    0
#define LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleSoftwareVersion    16

#define LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSerialNumber    6
#define LIN_BIT_OFFSET_CLM_ConsoleLampModuleSerialNumber    0
#define LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleSerialNumber    24

#define LIN_BYTE_OFFSET_CLM_ConsoleLampModuleTemperatureStatus    9
#define LIN_BIT_OFFSET_CLM_ConsoleLampModuleTemperatureStatus    0
#define LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleTemperatureStatus    2

#define LIN_BYTE_OFFSET_CLM_ConsoleLampModuleLEDStatus    9
#define LIN_BIT_OFFSET_CLM_ConsoleLampModuleLEDStatus    2
#define LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleLEDStatus    2

#define LIN_BYTE_OFFSET_CLM_ConsoleLampModuleVoltageStatus    9
#define LIN_BIT_OFFSET_CLM_ConsoleLampModuleVoltageStatus    4
#define LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleVoltageStatus    2

#define LIN_BYTE_OFFSET_CLM_ConsoleLampModuleResponseError    9
#define LIN_BIT_OFFSET_CLM_ConsoleLampModuleResponseError    6
#define LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleResponseError    1

#define LIN_BYTE_OFFSET_MasterReqB0    18
#define LIN_BIT_OFFSET_MasterReqB0    0
#define LIN_SIGNAL_SIZE_MasterReqB0    8

#define LIN_BYTE_OFFSET_MasterReqB1    19
#define LIN_BIT_OFFSET_MasterReqB1    0
#define LIN_SIGNAL_SIZE_MasterReqB1    8

#define LIN_BYTE_OFFSET_MasterReqB2    20
#define LIN_BIT_OFFSET_MasterReqB2    0
#define LIN_SIGNAL_SIZE_MasterReqB2    8

#define LIN_BYTE_OFFSET_MasterReqB3    21
#define LIN_BIT_OFFSET_MasterReqB3    0
#define LIN_SIGNAL_SIZE_MasterReqB3    8

#define LIN_BYTE_OFFSET_MasterReqB4    22
#define LIN_BIT_OFFSET_MasterReqB4    0
#define LIN_SIGNAL_SIZE_MasterReqB4    8

#define LIN_BYTE_OFFSET_MasterReqB5    23
#define LIN_BIT_OFFSET_MasterReqB5    0
#define LIN_SIGNAL_SIZE_MasterReqB5    8

#define LIN_BYTE_OFFSET_MasterReqB6    24
#define LIN_BIT_OFFSET_MasterReqB6    0
#define LIN_SIGNAL_SIZE_MasterReqB6    8

#define LIN_BYTE_OFFSET_MasterReqB7    25
#define LIN_BIT_OFFSET_MasterReqB7    0
#define LIN_SIGNAL_SIZE_MasterReqB7    8

#define LIN_BYTE_OFFSET_SlaveRespB0    10
#define LIN_BIT_OFFSET_SlaveRespB0    0
#define LIN_SIGNAL_SIZE_SlaveRespB0    8

#define LIN_BYTE_OFFSET_SlaveRespB1    11
#define LIN_BIT_OFFSET_SlaveRespB1    0
#define LIN_SIGNAL_SIZE_SlaveRespB1    8

#define LIN_BYTE_OFFSET_SlaveRespB2    12
#define LIN_BIT_OFFSET_SlaveRespB2    0
#define LIN_SIGNAL_SIZE_SlaveRespB2    8

#define LIN_BYTE_OFFSET_SlaveRespB3    13
#define LIN_BIT_OFFSET_SlaveRespB3    0
#define LIN_SIGNAL_SIZE_SlaveRespB3    8

#define LIN_BYTE_OFFSET_SlaveRespB4    14
#define LIN_BIT_OFFSET_SlaveRespB4    0
#define LIN_SIGNAL_SIZE_SlaveRespB4    8

#define LIN_BYTE_OFFSET_SlaveRespB5    15
#define LIN_BIT_OFFSET_SlaveRespB5    0
#define LIN_SIGNAL_SIZE_SlaveRespB5    8

#define LIN_BYTE_OFFSET_SlaveRespB6    16
#define LIN_BIT_OFFSET_SlaveRespB6    0
#define LIN_SIGNAL_SIZE_SlaveRespB6    8

#define LIN_BYTE_OFFSET_SlaveRespB7    17
#define LIN_BIT_OFFSET_SlaveRespB7    0
#define LIN_SIGNAL_SIZE_SlaveRespB7    8

/*
 * frame ctrl defines
 */ 
 
/*
 * the static signal access macros
 */

/* static access macros for signal LIN_SIGNAL_CCU_ConsoleIndicationLampMode */
#define l_u8_rd_LIN_SIGNAL_CCU_ConsoleIndicationLampMode() l_u8_rd_CCU_ConsoleIndicationLampMode()
#define l_u8_wr_LIN_SIGNAL_CCU_ConsoleIndicationLampMode(A) l_u8_wr_CCU_ConsoleIndicationLampMode(A)

#define l_u8_rd_CCU_ConsoleIndicationLampMode()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_CCU_ConsoleIndicationLampMode] & \
   (((1U << LIN_SIGNAL_SIZE_CCU_ConsoleIndicationLampMode) - 1) \
    << LIN_BIT_OFFSET_CCU_ConsoleIndicationLampMode )) >> LIN_BIT_OFFSET_CCU_ConsoleIndicationLampMode))
#define l_u8_wr_CCU_ConsoleIndicationLampMode(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_CCU_ConsoleIndicationLampMode] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CCU_ConsoleIndicationLampMode] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_CCU_ConsoleIndicationLampMode) - 1) << LIN_BIT_OFFSET_CCU_ConsoleIndicationLampMode)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_CCU_ConsoleIndicationLampMode) - 1) & (A)) << LIN_BIT_OFFSET_CCU_ConsoleIndicationLampMode))));\
  l_flg_set_changedCCU_ConsoleIndicationLampMode();} while(0)


/* static access macros for signal LIN_SIGNAL_CLM_ConsoleLampModuleHardwareVersion */
#define l_u16_rd_LIN_SIGNAL_CLM_ConsoleLampModuleHardwareVersion() l_u16_rd_CLM_ConsoleLampModuleHardwareVersion()
#define l_u16_wr_LIN_SIGNAL_CLM_ConsoleLampModuleHardwareVersion(A) l_u16_wr_CLM_ConsoleLampModuleHardwareVersion(A)

#define l_u16_rd_CLM_ConsoleLampModuleHardwareVersion()  \
  ((l_u16) ((l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleHardwareVersion + 1] & 0xff) << 8) + ((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleHardwareVersion]) >> 0x0)) 

#define l_u16_wr_CLM_ConsoleLampModuleHardwareVersion(A) \
do {l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleHardwareVersion + 1] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleHardwareVersion + 1] &  (0x00))) | \
   ((l_u8) ((l_u8) ((A) >> 8)) & 0xff))); \
  l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleHardwareVersion] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleHardwareVersion] & (0x00))) | \
  ((l_u8) (A) << LIN_BIT_OFFSET_CLM_ConsoleLampModuleHardwareVersion))); \
   l_flg_set_changedCLM_ConsoleLampModuleHardwareVersion();} while(0) 

/* static access macros for signal LIN_SIGNAL_CLM_ConsoleLampModuleSoftwareVersion */
#define l_u16_rd_LIN_SIGNAL_CLM_ConsoleLampModuleSoftwareVersion() l_u16_rd_CLM_ConsoleLampModuleSoftwareVersion()
#define l_u16_wr_LIN_SIGNAL_CLM_ConsoleLampModuleSoftwareVersion(A) l_u16_wr_CLM_ConsoleLampModuleSoftwareVersion(A)

#define l_u16_rd_CLM_ConsoleLampModuleSoftwareVersion()  \
  ((l_u16) ((l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSoftwareVersion + 1] & 0xff) << 8) + ((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSoftwareVersion]) >> 0x0)) 

#define l_u16_wr_CLM_ConsoleLampModuleSoftwareVersion(A) \
do {l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSoftwareVersion + 1] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSoftwareVersion + 1] &  (0x00))) | \
   ((l_u8) ((l_u8) ((A) >> 8)) & 0xff))); \
  l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSoftwareVersion] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSoftwareVersion] & (0x00))) | \
  ((l_u8) (A) << LIN_BIT_OFFSET_CLM_ConsoleLampModuleSoftwareVersion))); \
   l_flg_set_changedCLM_ConsoleLampModuleSoftwareVersion();} while(0) 

/* static access macros for signal LIN_SIGNAL_CLM_ConsoleLampModuleSerialNumber */
#define l_bytes_rd_LIN_SIGNAL_CLM_ConsoleLampModuleSerialNumber(start, count, data) l_bytes_rd_CLM_ConsoleLampModuleSerialNumber(start, count, data)
#define l_bytes_wr_LIN_SIGNAL_CLM_ConsoleLampModuleSerialNumber(start, count, data) l_bytes_wr_CLM_ConsoleLampModuleSerialNumber((start), (count), (data))

#define l_bytes_rd_CLM_ConsoleLampModuleSerialNumber(start,count, data) \
  do {l_u8       i; \
    for (i = 0; i < (count); ++i)  (data)[i] = l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSerialNumber + i + (start)];} while(0)
#define l_bytes_wr_CLM_ConsoleLampModuleSerialNumber(start,count, data) \
  do {l_u8       i; \
    for (i = 0; i < (count); ++i)l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleSerialNumber + i + (start)]  = (data)[i]; \
  l_flg_set_changedCLM_ConsoleLampModuleSerialNumber();} while(0)

/* static access macros for signal LIN_SIGNAL_CLM_ConsoleLampModuleTemperatureStatus */
#define l_u8_rd_LIN_SIGNAL_CLM_ConsoleLampModuleTemperatureStatus() l_u8_rd_CLM_ConsoleLampModuleTemperatureStatus()
#define l_u8_wr_LIN_SIGNAL_CLM_ConsoleLampModuleTemperatureStatus(A) l_u8_wr_CLM_ConsoleLampModuleTemperatureStatus(A)

#define l_u8_rd_CLM_ConsoleLampModuleTemperatureStatus()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleTemperatureStatus] & \
   (((1U << LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleTemperatureStatus) - 1) \
    << LIN_BIT_OFFSET_CLM_ConsoleLampModuleTemperatureStatus )) >> LIN_BIT_OFFSET_CLM_ConsoleLampModuleTemperatureStatus))
#define l_u8_wr_CLM_ConsoleLampModuleTemperatureStatus(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleTemperatureStatus] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleTemperatureStatus] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleTemperatureStatus) - 1) << LIN_BIT_OFFSET_CLM_ConsoleLampModuleTemperatureStatus)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleTemperatureStatus) - 1) & (A)) << LIN_BIT_OFFSET_CLM_ConsoleLampModuleTemperatureStatus))));\
  l_flg_set_changedCLM_ConsoleLampModuleTemperatureStatus();} while(0)


/* static access macros for signal LIN_SIGNAL_CLM_ConsoleLampModuleLEDStatus */
#define l_u8_rd_LIN_SIGNAL_CLM_ConsoleLampModuleLEDStatus() l_u8_rd_CLM_ConsoleLampModuleLEDStatus()
#define l_u8_wr_LIN_SIGNAL_CLM_ConsoleLampModuleLEDStatus(A) l_u8_wr_CLM_ConsoleLampModuleLEDStatus(A)

#define l_u8_rd_CLM_ConsoleLampModuleLEDStatus()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleLEDStatus] & \
   (((1U << LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleLEDStatus) - 1) \
    << LIN_BIT_OFFSET_CLM_ConsoleLampModuleLEDStatus )) >> LIN_BIT_OFFSET_CLM_ConsoleLampModuleLEDStatus))
#define l_u8_wr_CLM_ConsoleLampModuleLEDStatus(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleLEDStatus] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleLEDStatus] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleLEDStatus) - 1) << LIN_BIT_OFFSET_CLM_ConsoleLampModuleLEDStatus)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleLEDStatus) - 1) & (A)) << LIN_BIT_OFFSET_CLM_ConsoleLampModuleLEDStatus))));\
  l_flg_set_changedCLM_ConsoleLampModuleLEDStatus();} while(0)


/* static access macros for signal LIN_SIGNAL_CLM_ConsoleLampModuleVoltageStatus */
#define l_u8_rd_LIN_SIGNAL_CLM_ConsoleLampModuleVoltageStatus() l_u8_rd_CLM_ConsoleLampModuleVoltageStatus()
#define l_u8_wr_LIN_SIGNAL_CLM_ConsoleLampModuleVoltageStatus(A) l_u8_wr_CLM_ConsoleLampModuleVoltageStatus(A)

#define l_u8_rd_CLM_ConsoleLampModuleVoltageStatus()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleVoltageStatus] & \
   (((1U << LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleVoltageStatus) - 1) \
    << LIN_BIT_OFFSET_CLM_ConsoleLampModuleVoltageStatus )) >> LIN_BIT_OFFSET_CLM_ConsoleLampModuleVoltageStatus))
#define l_u8_wr_CLM_ConsoleLampModuleVoltageStatus(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleVoltageStatus] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleVoltageStatus] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleVoltageStatus) - 1) << LIN_BIT_OFFSET_CLM_ConsoleLampModuleVoltageStatus)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_CLM_ConsoleLampModuleVoltageStatus) - 1) & (A)) << LIN_BIT_OFFSET_CLM_ConsoleLampModuleVoltageStatus))));\
  l_flg_set_changedCLM_ConsoleLampModuleVoltageStatus();} while(0)


/* static access macros for signal LIN_SIGNAL_CLM_ConsoleLampModuleResponseError */
#define l_bool_rd_LIN_SIGNAL_CLM_ConsoleLampModuleResponseError() l_bool_rd_CLM_ConsoleLampModuleResponseError()
#define l_bool_wr_LIN_SIGNAL_CLM_ConsoleLampModuleResponseError(A) l_bool_wr_CLM_ConsoleLampModuleResponseError(A)

#define l_bool_rd_CLM_ConsoleLampModuleResponseError()  \
   (LIN_TEST_BIT(l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleResponseError], \
   LIN_BIT_OFFSET_CLM_ConsoleLampModuleResponseError))
#define l_bool_wr_CLM_ConsoleLampModuleResponseError(A) \
  do {(A) ? \
  (LIN_SET_BIT(l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleResponseError], \
  LIN_BIT_OFFSET_CLM_ConsoleLampModuleResponseError)):\
  (LIN_CLEAR_BIT(l_pFrameBuf[LIN_BYTE_OFFSET_CLM_ConsoleLampModuleResponseError], \
  LIN_BIT_OFFSET_CLM_ConsoleLampModuleResponseError));\
  l_flg_set_changedCLM_ConsoleLampModuleResponseError();} while(0)


/* static access macros for signal LIN_SIGNAL_MasterReqB0 */
#define l_u8_rd_LIN_SIGNAL_MasterReqB0() l_u8_rd_MasterReqB0()
#define l_u8_wr_LIN_SIGNAL_MasterReqB0(A) l_u8_wr_MasterReqB0(A)

#define l_u8_rd_MasterReqB0()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB0] & \
   (((1U << LIN_SIGNAL_SIZE_MasterReqB0) - 1) \
    << LIN_BIT_OFFSET_MasterReqB0 )) >> LIN_BIT_OFFSET_MasterReqB0))
#define l_u8_wr_MasterReqB0(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB0] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB0] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB0) - 1) << LIN_BIT_OFFSET_MasterReqB0)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_MasterReqB0) - 1) & (A)) << LIN_BIT_OFFSET_MasterReqB0))));\
  l_flg_set_changedMasterReqB0();} while(0)


/* static access macros for signal LIN_SIGNAL_MasterReqB1 */
#define l_u8_rd_LIN_SIGNAL_MasterReqB1() l_u8_rd_MasterReqB1()
#define l_u8_wr_LIN_SIGNAL_MasterReqB1(A) l_u8_wr_MasterReqB1(A)

#define l_u8_rd_MasterReqB1()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB1] & \
   (((1U << LIN_SIGNAL_SIZE_MasterReqB1) - 1) \
    << LIN_BIT_OFFSET_MasterReqB1 )) >> LIN_BIT_OFFSET_MasterReqB1))
#define l_u8_wr_MasterReqB1(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB1] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB1] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB1) - 1) << LIN_BIT_OFFSET_MasterReqB1)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_MasterReqB1) - 1) & (A)) << LIN_BIT_OFFSET_MasterReqB1))));\
  l_flg_set_changedMasterReqB1();} while(0)


/* static access macros for signal LIN_SIGNAL_MasterReqB2 */
#define l_u8_rd_LIN_SIGNAL_MasterReqB2() l_u8_rd_MasterReqB2()
#define l_u8_wr_LIN_SIGNAL_MasterReqB2(A) l_u8_wr_MasterReqB2(A)

#define l_u8_rd_MasterReqB2()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB2] & \
   (((1U << LIN_SIGNAL_SIZE_MasterReqB2) - 1) \
    << LIN_BIT_OFFSET_MasterReqB2 )) >> LIN_BIT_OFFSET_MasterReqB2))
#define l_u8_wr_MasterReqB2(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB2] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB2] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB2) - 1) << LIN_BIT_OFFSET_MasterReqB2)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_MasterReqB2) - 1) & (A)) << LIN_BIT_OFFSET_MasterReqB2))));\
  l_flg_set_changedMasterReqB2();} while(0)


/* static access macros for signal LIN_SIGNAL_MasterReqB3 */
#define l_u8_rd_LIN_SIGNAL_MasterReqB3() l_u8_rd_MasterReqB3()
#define l_u8_wr_LIN_SIGNAL_MasterReqB3(A) l_u8_wr_MasterReqB3(A)

#define l_u8_rd_MasterReqB3()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB3] & \
   (((1U << LIN_SIGNAL_SIZE_MasterReqB3) - 1) \
    << LIN_BIT_OFFSET_MasterReqB3 )) >> LIN_BIT_OFFSET_MasterReqB3))
#define l_u8_wr_MasterReqB3(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB3] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB3] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB3) - 1) << LIN_BIT_OFFSET_MasterReqB3)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_MasterReqB3) - 1) & (A)) << LIN_BIT_OFFSET_MasterReqB3))));\
  l_flg_set_changedMasterReqB3();} while(0)


/* static access macros for signal LIN_SIGNAL_MasterReqB4 */
#define l_u8_rd_LIN_SIGNAL_MasterReqB4() l_u8_rd_MasterReqB4()
#define l_u8_wr_LIN_SIGNAL_MasterReqB4(A) l_u8_wr_MasterReqB4(A)

#define l_u8_rd_MasterReqB4()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB4] & \
   (((1U << LIN_SIGNAL_SIZE_MasterReqB4) - 1) \
    << LIN_BIT_OFFSET_MasterReqB4 )) >> LIN_BIT_OFFSET_MasterReqB4))
#define l_u8_wr_MasterReqB4(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB4] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB4] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB4) - 1) << LIN_BIT_OFFSET_MasterReqB4)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_MasterReqB4) - 1) & (A)) << LIN_BIT_OFFSET_MasterReqB4))));\
  l_flg_set_changedMasterReqB4();} while(0)


/* static access macros for signal LIN_SIGNAL_MasterReqB5 */
#define l_u8_rd_LIN_SIGNAL_MasterReqB5() l_u8_rd_MasterReqB5()
#define l_u8_wr_LIN_SIGNAL_MasterReqB5(A) l_u8_wr_MasterReqB5(A)

#define l_u8_rd_MasterReqB5()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB5] & \
   (((1U << LIN_SIGNAL_SIZE_MasterReqB5) - 1) \
    << LIN_BIT_OFFSET_MasterReqB5 )) >> LIN_BIT_OFFSET_MasterReqB5))
#define l_u8_wr_MasterReqB5(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB5] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB5] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB5) - 1) << LIN_BIT_OFFSET_MasterReqB5)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_MasterReqB5) - 1) & (A)) << LIN_BIT_OFFSET_MasterReqB5))));\
  l_flg_set_changedMasterReqB5();} while(0)


/* static access macros for signal LIN_SIGNAL_MasterReqB6 */
#define l_u8_rd_LIN_SIGNAL_MasterReqB6() l_u8_rd_MasterReqB6()
#define l_u8_wr_LIN_SIGNAL_MasterReqB6(A) l_u8_wr_MasterReqB6(A)

#define l_u8_rd_MasterReqB6()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB6] & \
   (((1U << LIN_SIGNAL_SIZE_MasterReqB6) - 1) \
    << LIN_BIT_OFFSET_MasterReqB6 )) >> LIN_BIT_OFFSET_MasterReqB6))
#define l_u8_wr_MasterReqB6(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB6] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB6] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB6) - 1) << LIN_BIT_OFFSET_MasterReqB6)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_MasterReqB6) - 1) & (A)) << LIN_BIT_OFFSET_MasterReqB6))));\
  l_flg_set_changedMasterReqB6();} while(0)


/* static access macros for signal LIN_SIGNAL_MasterReqB7 */
#define l_u8_rd_LIN_SIGNAL_MasterReqB7() l_u8_rd_MasterReqB7()
#define l_u8_wr_LIN_SIGNAL_MasterReqB7(A) l_u8_wr_MasterReqB7(A)

#define l_u8_rd_MasterReqB7()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB7] & \
   (((1U << LIN_SIGNAL_SIZE_MasterReqB7) - 1) \
    << LIN_BIT_OFFSET_MasterReqB7 )) >> LIN_BIT_OFFSET_MasterReqB7))
#define l_u8_wr_MasterReqB7(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB7] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_MasterReqB7] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB7) - 1) << LIN_BIT_OFFSET_MasterReqB7)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_MasterReqB7) - 1) & (A)) << LIN_BIT_OFFSET_MasterReqB7))));\
  l_flg_set_changedMasterReqB7();} while(0)


/* static access macros for signal LIN_SIGNAL_SlaveRespB0 */
#define l_u8_rd_LIN_SIGNAL_SlaveRespB0() l_u8_rd_SlaveRespB0()
#define l_u8_wr_LIN_SIGNAL_SlaveRespB0(A) l_u8_wr_SlaveRespB0(A)

#define l_u8_rd_SlaveRespB0()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB0] & \
   (((1U << LIN_SIGNAL_SIZE_SlaveRespB0) - 1) \
    << LIN_BIT_OFFSET_SlaveRespB0 )) >> LIN_BIT_OFFSET_SlaveRespB0))
#define l_u8_wr_SlaveRespB0(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB0] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB0] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB0) - 1) << LIN_BIT_OFFSET_SlaveRespB0)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_SlaveRespB0) - 1) & (A)) << LIN_BIT_OFFSET_SlaveRespB0))));\
  l_flg_set_changedSlaveRespB0();} while(0)


/* static access macros for signal LIN_SIGNAL_SlaveRespB1 */
#define l_u8_rd_LIN_SIGNAL_SlaveRespB1() l_u8_rd_SlaveRespB1()
#define l_u8_wr_LIN_SIGNAL_SlaveRespB1(A) l_u8_wr_SlaveRespB1(A)

#define l_u8_rd_SlaveRespB1()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB1] & \
   (((1U << LIN_SIGNAL_SIZE_SlaveRespB1) - 1) \
    << LIN_BIT_OFFSET_SlaveRespB1 )) >> LIN_BIT_OFFSET_SlaveRespB1))
#define l_u8_wr_SlaveRespB1(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB1] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB1] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB1) - 1) << LIN_BIT_OFFSET_SlaveRespB1)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_SlaveRespB1) - 1) & (A)) << LIN_BIT_OFFSET_SlaveRespB1))));\
  l_flg_set_changedSlaveRespB1();} while(0)


/* static access macros for signal LIN_SIGNAL_SlaveRespB2 */
#define l_u8_rd_LIN_SIGNAL_SlaveRespB2() l_u8_rd_SlaveRespB2()
#define l_u8_wr_LIN_SIGNAL_SlaveRespB2(A) l_u8_wr_SlaveRespB2(A)

#define l_u8_rd_SlaveRespB2()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB2] & \
   (((1U << LIN_SIGNAL_SIZE_SlaveRespB2) - 1) \
    << LIN_BIT_OFFSET_SlaveRespB2 )) >> LIN_BIT_OFFSET_SlaveRespB2))
#define l_u8_wr_SlaveRespB2(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB2] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB2] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB2) - 1) << LIN_BIT_OFFSET_SlaveRespB2)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_SlaveRespB2) - 1) & (A)) << LIN_BIT_OFFSET_SlaveRespB2))));\
  l_flg_set_changedSlaveRespB2();} while(0)


/* static access macros for signal LIN_SIGNAL_SlaveRespB3 */
#define l_u8_rd_LIN_SIGNAL_SlaveRespB3() l_u8_rd_SlaveRespB3()
#define l_u8_wr_LIN_SIGNAL_SlaveRespB3(A) l_u8_wr_SlaveRespB3(A)

#define l_u8_rd_SlaveRespB3()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB3] & \
   (((1U << LIN_SIGNAL_SIZE_SlaveRespB3) - 1) \
    << LIN_BIT_OFFSET_SlaveRespB3 )) >> LIN_BIT_OFFSET_SlaveRespB3))
#define l_u8_wr_SlaveRespB3(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB3] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB3] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB3) - 1) << LIN_BIT_OFFSET_SlaveRespB3)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_SlaveRespB3) - 1) & (A)) << LIN_BIT_OFFSET_SlaveRespB3))));\
  l_flg_set_changedSlaveRespB3();} while(0)


/* static access macros for signal LIN_SIGNAL_SlaveRespB4 */
#define l_u8_rd_LIN_SIGNAL_SlaveRespB4() l_u8_rd_SlaveRespB4()
#define l_u8_wr_LIN_SIGNAL_SlaveRespB4(A) l_u8_wr_SlaveRespB4(A)

#define l_u8_rd_SlaveRespB4()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB4] & \
   (((1U << LIN_SIGNAL_SIZE_SlaveRespB4) - 1) \
    << LIN_BIT_OFFSET_SlaveRespB4 )) >> LIN_BIT_OFFSET_SlaveRespB4))
#define l_u8_wr_SlaveRespB4(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB4] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB4] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB4) - 1) << LIN_BIT_OFFSET_SlaveRespB4)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_SlaveRespB4) - 1) & (A)) << LIN_BIT_OFFSET_SlaveRespB4))));\
  l_flg_set_changedSlaveRespB4();} while(0)


/* static access macros for signal LIN_SIGNAL_SlaveRespB5 */
#define l_u8_rd_LIN_SIGNAL_SlaveRespB5() l_u8_rd_SlaveRespB5()
#define l_u8_wr_LIN_SIGNAL_SlaveRespB5(A) l_u8_wr_SlaveRespB5(A)

#define l_u8_rd_SlaveRespB5()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB5] & \
   (((1U << LIN_SIGNAL_SIZE_SlaveRespB5) - 1) \
    << LIN_BIT_OFFSET_SlaveRespB5 )) >> LIN_BIT_OFFSET_SlaveRespB5))
#define l_u8_wr_SlaveRespB5(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB5] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB5] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB5) - 1) << LIN_BIT_OFFSET_SlaveRespB5)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_SlaveRespB5) - 1) & (A)) << LIN_BIT_OFFSET_SlaveRespB5))));\
  l_flg_set_changedSlaveRespB5();} while(0)


/* static access macros for signal LIN_SIGNAL_SlaveRespB6 */
#define l_u8_rd_LIN_SIGNAL_SlaveRespB6() l_u8_rd_SlaveRespB6()
#define l_u8_wr_LIN_SIGNAL_SlaveRespB6(A) l_u8_wr_SlaveRespB6(A)

#define l_u8_rd_SlaveRespB6()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB6] & \
   (((1U << LIN_SIGNAL_SIZE_SlaveRespB6) - 1) \
    << LIN_BIT_OFFSET_SlaveRespB6 )) >> LIN_BIT_OFFSET_SlaveRespB6))
#define l_u8_wr_SlaveRespB6(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB6] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB6] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB6) - 1) << LIN_BIT_OFFSET_SlaveRespB6)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_SlaveRespB6) - 1) & (A)) << LIN_BIT_OFFSET_SlaveRespB6))));\
  l_flg_set_changedSlaveRespB6();} while(0)


/* static access macros for signal LIN_SIGNAL_SlaveRespB7 */
#define l_u8_rd_LIN_SIGNAL_SlaveRespB7() l_u8_rd_SlaveRespB7()
#define l_u8_wr_LIN_SIGNAL_SlaveRespB7(A) l_u8_wr_SlaveRespB7(A)

#define l_u8_rd_SlaveRespB7()  \
  ((l_u8) ((l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB7] & \
   (((1U << LIN_SIGNAL_SIZE_SlaveRespB7) - 1) \
    << LIN_BIT_OFFSET_SlaveRespB7 )) >> LIN_BIT_OFFSET_SlaveRespB7))
#define l_u8_wr_SlaveRespB7(A) \
  do {l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB7] = \
  ((l_u8) (((l_u8) (l_pFrameBuf[LIN_BYTE_OFFSET_SlaveRespB7] & \
   ((l_u8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB7) - 1) << LIN_BIT_OFFSET_SlaveRespB7)))))  | \
  ((l_u8) ((((1U << LIN_SIGNAL_SIZE_SlaveRespB7) - 1) & (A)) << LIN_BIT_OFFSET_SlaveRespB7))));\
  l_flg_set_changedSlaveRespB7();} while(0)

/*
 * static access macros for notification flags
 */

/* flag access macros for signal CCU_ConsoleIndicationLampMode*/
#define l_flg_tst_LIN_FLAG_RxCCU_ConsoleIndicationLampMode() l_flg_tst_RxCCU_ConsoleIndicationLampMode()
#define l_flg_clr_LIN_FLAG_RxCCU_ConsoleIndicationLampMode() l_flg_clr_RxCCU_ConsoleIndicationLampMode()
#define l_flg_tst_LIN_FLAG_TxCCU_ConsoleIndicationLampMode() l_flg_tst_TxCCU_ConsoleIndicationLampMode()
#define l_flg_clr_LIN_FLAG_TxCCU_ConsoleIndicationLampMode() l_flg_clr_TxCCU_ConsoleIndicationLampMode()
#define l_flg_tst_RxCCU_ConsoleIndicationLampMode() LIN_TEST_BIT(l_pRxFlagData[0], 1)
#define l_flg_clr_RxCCU_ConsoleIndicationLampMode() LIN_CLEAR_BIT(l_pRxFlagData[0], 1)
#define l_flg_set_RxCCU_ConsoleIndicationLampMode() LIN_SET_BIT(l_pRxFlagData[0], 1)
#define l_flg_tst_TxCCU_ConsoleIndicationLampMode() LIN_TEST_BIT(l_pTxFlagData[0], 1)
#define l_flg_clr_TxCCU_ConsoleIndicationLampMode() LIN_CLEAR_BIT(l_pTxFlagData[0], 1)
#define l_flg_set_TxCCU_ConsoleIndicationLampMode() LIN_SET_BIT(l_pTxFlagData[0], 1)

#define l_flg_tst_changedCCU_ConsoleIndicationLampMode(ifc) LIN_TEST_CHANGED_FLAG_BIT(0, 0)
#define l_flg_set_changedCCU_ConsoleIndicationLampMode() LIN_SET_CHANGED_FLAG_BIT(0, 0)
#define l_flg_clr_changedCCU_ConsoleIndicationLampMode(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(0, 0)

/* flag access macros for signal CCU_ConsoleIndicationLampMode subscribed by CLM*/
#define l_flg_clr_CCU_ConsoleIndicationLampMode() l_flg_clr_RxCCU_ConsoleIndicationLampMode()
#define l_flg_tst_CCU_ConsoleIndicationLampMode() l_flg_tst_RxCCU_ConsoleIndicationLampMode()

/* flag access macros for signal CLM_ConsoleLampModuleHardwareVersion*/
#define l_flg_tst_LIN_FLAG_RxCLM_ConsoleLampModuleHardwareVersion() l_flg_tst_RxCLM_ConsoleLampModuleHardwareVersion()
#define l_flg_clr_LIN_FLAG_RxCLM_ConsoleLampModuleHardwareVersion() l_flg_clr_RxCLM_ConsoleLampModuleHardwareVersion()
#define l_flg_tst_LIN_FLAG_TxCLM_ConsoleLampModuleHardwareVersion() l_flg_tst_TxCLM_ConsoleLampModuleHardwareVersion()
#define l_flg_clr_LIN_FLAG_TxCLM_ConsoleLampModuleHardwareVersion() l_flg_clr_TxCLM_ConsoleLampModuleHardwareVersion()
#define l_flg_tst_RxCLM_ConsoleLampModuleHardwareVersion() LIN_TEST_BIT(l_pRxFlagData[1], 1)
#define l_flg_clr_RxCLM_ConsoleLampModuleHardwareVersion() LIN_CLEAR_BIT(l_pRxFlagData[1], 1)
#define l_flg_set_RxCLM_ConsoleLampModuleHardwareVersion() LIN_SET_BIT(l_pRxFlagData[1], 1)
#define l_flg_tst_TxCLM_ConsoleLampModuleHardwareVersion() LIN_TEST_BIT(l_pTxFlagData[1], 1)
#define l_flg_clr_TxCLM_ConsoleLampModuleHardwareVersion() LIN_CLEAR_BIT(l_pTxFlagData[1], 1)
#define l_flg_set_TxCLM_ConsoleLampModuleHardwareVersion() LIN_SET_BIT(l_pTxFlagData[1], 1)

#define l_flg_tst_changedCLM_ConsoleLampModuleHardwareVersion(ifc) LIN_TEST_CHANGED_FLAG_BIT(1, 0)
#define l_flg_set_changedCLM_ConsoleLampModuleHardwareVersion() LIN_SET_CHANGED_FLAG_BIT(1, 0)
#define l_flg_clr_changedCLM_ConsoleLampModuleHardwareVersion(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(1, 0)

/* flag access macros for signal CLM_ConsoleLampModuleHardwareVersion published by CLM*/
#define l_flg_clr_CLM_ConsoleLampModuleHardwareVersion() l_flg_clr_TxCLM_ConsoleLampModuleHardwareVersion()
#define l_flg_tst_CLM_ConsoleLampModuleHardwareVersion() l_flg_tst_TxCLM_ConsoleLampModuleHardwareVersion()

/* flag access macros for signal CLM_ConsoleLampModuleSoftwareVersion*/
#define l_flg_tst_LIN_FLAG_RxCLM_ConsoleLampModuleSoftwareVersion() l_flg_tst_RxCLM_ConsoleLampModuleSoftwareVersion()
#define l_flg_clr_LIN_FLAG_RxCLM_ConsoleLampModuleSoftwareVersion() l_flg_clr_RxCLM_ConsoleLampModuleSoftwareVersion()
#define l_flg_tst_LIN_FLAG_TxCLM_ConsoleLampModuleSoftwareVersion() l_flg_tst_TxCLM_ConsoleLampModuleSoftwareVersion()
#define l_flg_clr_LIN_FLAG_TxCLM_ConsoleLampModuleSoftwareVersion() l_flg_clr_TxCLM_ConsoleLampModuleSoftwareVersion()
#define l_flg_tst_RxCLM_ConsoleLampModuleSoftwareVersion() LIN_TEST_BIT(l_pRxFlagData[1], 2)
#define l_flg_clr_RxCLM_ConsoleLampModuleSoftwareVersion() LIN_CLEAR_BIT(l_pRxFlagData[1], 2)
#define l_flg_set_RxCLM_ConsoleLampModuleSoftwareVersion() LIN_SET_BIT(l_pRxFlagData[1], 2)
#define l_flg_tst_TxCLM_ConsoleLampModuleSoftwareVersion() LIN_TEST_BIT(l_pTxFlagData[1], 2)
#define l_flg_clr_TxCLM_ConsoleLampModuleSoftwareVersion() LIN_CLEAR_BIT(l_pTxFlagData[1], 2)
#define l_flg_set_TxCLM_ConsoleLampModuleSoftwareVersion() LIN_SET_BIT(l_pTxFlagData[1], 2)

#define l_flg_tst_changedCLM_ConsoleLampModuleSoftwareVersion(ifc) LIN_TEST_CHANGED_FLAG_BIT(1, 1)
#define l_flg_set_changedCLM_ConsoleLampModuleSoftwareVersion() LIN_SET_CHANGED_FLAG_BIT(1, 1)
#define l_flg_clr_changedCLM_ConsoleLampModuleSoftwareVersion(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(1, 1)

/* flag access macros for signal CLM_ConsoleLampModuleSoftwareVersion published by CLM*/
#define l_flg_clr_CLM_ConsoleLampModuleSoftwareVersion() l_flg_clr_TxCLM_ConsoleLampModuleSoftwareVersion()
#define l_flg_tst_CLM_ConsoleLampModuleSoftwareVersion() l_flg_tst_TxCLM_ConsoleLampModuleSoftwareVersion()

/* flag access macros for signal CLM_ConsoleLampModuleSerialNumber*/
#define l_flg_tst_LIN_FLAG_RxCLM_ConsoleLampModuleSerialNumber() l_flg_tst_RxCLM_ConsoleLampModuleSerialNumber()
#define l_flg_clr_LIN_FLAG_RxCLM_ConsoleLampModuleSerialNumber() l_flg_clr_RxCLM_ConsoleLampModuleSerialNumber()
#define l_flg_tst_LIN_FLAG_TxCLM_ConsoleLampModuleSerialNumber() l_flg_tst_TxCLM_ConsoleLampModuleSerialNumber()
#define l_flg_clr_LIN_FLAG_TxCLM_ConsoleLampModuleSerialNumber() l_flg_clr_TxCLM_ConsoleLampModuleSerialNumber()
#define l_flg_tst_RxCLM_ConsoleLampModuleSerialNumber() LIN_TEST_BIT(l_pRxFlagData[1], 3)
#define l_flg_clr_RxCLM_ConsoleLampModuleSerialNumber() LIN_CLEAR_BIT(l_pRxFlagData[1], 3)
#define l_flg_set_RxCLM_ConsoleLampModuleSerialNumber() LIN_SET_BIT(l_pRxFlagData[1], 3)
#define l_flg_tst_TxCLM_ConsoleLampModuleSerialNumber() LIN_TEST_BIT(l_pTxFlagData[1], 3)
#define l_flg_clr_TxCLM_ConsoleLampModuleSerialNumber() LIN_CLEAR_BIT(l_pTxFlagData[1], 3)
#define l_flg_set_TxCLM_ConsoleLampModuleSerialNumber() LIN_SET_BIT(l_pTxFlagData[1], 3)

#define l_flg_tst_changedCLM_ConsoleLampModuleSerialNumber(ifc) LIN_TEST_CHANGED_FLAG_BIT(1, 2)
#define l_flg_set_changedCLM_ConsoleLampModuleSerialNumber() LIN_SET_CHANGED_FLAG_BIT(1, 2)
#define l_flg_clr_changedCLM_ConsoleLampModuleSerialNumber(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(1, 2)

/* flag access macros for signal CLM_ConsoleLampModuleSerialNumber published by CLM*/
#define l_flg_clr_CLM_ConsoleLampModuleSerialNumber() l_flg_clr_TxCLM_ConsoleLampModuleSerialNumber()
#define l_flg_tst_CLM_ConsoleLampModuleSerialNumber() l_flg_tst_TxCLM_ConsoleLampModuleSerialNumber()

/* flag access macros for signal CLM_ConsoleLampModuleTemperatureStatus*/
#define l_flg_tst_LIN_FLAG_RxCLM_ConsoleLampModuleTemperatureStatus() l_flg_tst_RxCLM_ConsoleLampModuleTemperatureStatus()
#define l_flg_clr_LIN_FLAG_RxCLM_ConsoleLampModuleTemperatureStatus() l_flg_clr_RxCLM_ConsoleLampModuleTemperatureStatus()
#define l_flg_tst_LIN_FLAG_TxCLM_ConsoleLampModuleTemperatureStatus() l_flg_tst_TxCLM_ConsoleLampModuleTemperatureStatus()
#define l_flg_clr_LIN_FLAG_TxCLM_ConsoleLampModuleTemperatureStatus() l_flg_clr_TxCLM_ConsoleLampModuleTemperatureStatus()
#define l_flg_tst_RxCLM_ConsoleLampModuleTemperatureStatus() LIN_TEST_BIT(l_pRxFlagData[1], 4)
#define l_flg_clr_RxCLM_ConsoleLampModuleTemperatureStatus() LIN_CLEAR_BIT(l_pRxFlagData[1], 4)
#define l_flg_set_RxCLM_ConsoleLampModuleTemperatureStatus() LIN_SET_BIT(l_pRxFlagData[1], 4)
#define l_flg_tst_TxCLM_ConsoleLampModuleTemperatureStatus() LIN_TEST_BIT(l_pTxFlagData[1], 4)
#define l_flg_clr_TxCLM_ConsoleLampModuleTemperatureStatus() LIN_CLEAR_BIT(l_pTxFlagData[1], 4)
#define l_flg_set_TxCLM_ConsoleLampModuleTemperatureStatus() LIN_SET_BIT(l_pTxFlagData[1], 4)

#define l_flg_tst_changedCLM_ConsoleLampModuleTemperatureStatus(ifc) LIN_TEST_CHANGED_FLAG_BIT(1, 3)
#define l_flg_set_changedCLM_ConsoleLampModuleTemperatureStatus() LIN_SET_CHANGED_FLAG_BIT(1, 3)
#define l_flg_clr_changedCLM_ConsoleLampModuleTemperatureStatus(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(1, 3)

/* flag access macros for signal CLM_ConsoleLampModuleTemperatureStatus published by CLM*/
#define l_flg_clr_CLM_ConsoleLampModuleTemperatureStatus() l_flg_clr_TxCLM_ConsoleLampModuleTemperatureStatus()
#define l_flg_tst_CLM_ConsoleLampModuleTemperatureStatus() l_flg_tst_TxCLM_ConsoleLampModuleTemperatureStatus()

/* flag access macros for signal CLM_ConsoleLampModuleLEDStatus*/
#define l_flg_tst_LIN_FLAG_RxCLM_ConsoleLampModuleLEDStatus() l_flg_tst_RxCLM_ConsoleLampModuleLEDStatus()
#define l_flg_clr_LIN_FLAG_RxCLM_ConsoleLampModuleLEDStatus() l_flg_clr_RxCLM_ConsoleLampModuleLEDStatus()
#define l_flg_tst_LIN_FLAG_TxCLM_ConsoleLampModuleLEDStatus() l_flg_tst_TxCLM_ConsoleLampModuleLEDStatus()
#define l_flg_clr_LIN_FLAG_TxCLM_ConsoleLampModuleLEDStatus() l_flg_clr_TxCLM_ConsoleLampModuleLEDStatus()
#define l_flg_tst_RxCLM_ConsoleLampModuleLEDStatus() LIN_TEST_BIT(l_pRxFlagData[1], 5)
#define l_flg_clr_RxCLM_ConsoleLampModuleLEDStatus() LIN_CLEAR_BIT(l_pRxFlagData[1], 5)
#define l_flg_set_RxCLM_ConsoleLampModuleLEDStatus() LIN_SET_BIT(l_pRxFlagData[1], 5)
#define l_flg_tst_TxCLM_ConsoleLampModuleLEDStatus() LIN_TEST_BIT(l_pTxFlagData[1], 5)
#define l_flg_clr_TxCLM_ConsoleLampModuleLEDStatus() LIN_CLEAR_BIT(l_pTxFlagData[1], 5)
#define l_flg_set_TxCLM_ConsoleLampModuleLEDStatus() LIN_SET_BIT(l_pTxFlagData[1], 5)

#define l_flg_tst_changedCLM_ConsoleLampModuleLEDStatus(ifc) LIN_TEST_CHANGED_FLAG_BIT(1, 4)
#define l_flg_set_changedCLM_ConsoleLampModuleLEDStatus() LIN_SET_CHANGED_FLAG_BIT(1, 4)
#define l_flg_clr_changedCLM_ConsoleLampModuleLEDStatus(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(1, 4)

/* flag access macros for signal CLM_ConsoleLampModuleLEDStatus published by CLM*/
#define l_flg_clr_CLM_ConsoleLampModuleLEDStatus() l_flg_clr_TxCLM_ConsoleLampModuleLEDStatus()
#define l_flg_tst_CLM_ConsoleLampModuleLEDStatus() l_flg_tst_TxCLM_ConsoleLampModuleLEDStatus()

/* flag access macros for signal CLM_ConsoleLampModuleVoltageStatus*/
#define l_flg_tst_LIN_FLAG_RxCLM_ConsoleLampModuleVoltageStatus() l_flg_tst_RxCLM_ConsoleLampModuleVoltageStatus()
#define l_flg_clr_LIN_FLAG_RxCLM_ConsoleLampModuleVoltageStatus() l_flg_clr_RxCLM_ConsoleLampModuleVoltageStatus()
#define l_flg_tst_LIN_FLAG_TxCLM_ConsoleLampModuleVoltageStatus() l_flg_tst_TxCLM_ConsoleLampModuleVoltageStatus()
#define l_flg_clr_LIN_FLAG_TxCLM_ConsoleLampModuleVoltageStatus() l_flg_clr_TxCLM_ConsoleLampModuleVoltageStatus()
#define l_flg_tst_RxCLM_ConsoleLampModuleVoltageStatus() LIN_TEST_BIT(l_pRxFlagData[1], 6)
#define l_flg_clr_RxCLM_ConsoleLampModuleVoltageStatus() LIN_CLEAR_BIT(l_pRxFlagData[1], 6)
#define l_flg_set_RxCLM_ConsoleLampModuleVoltageStatus() LIN_SET_BIT(l_pRxFlagData[1], 6)
#define l_flg_tst_TxCLM_ConsoleLampModuleVoltageStatus() LIN_TEST_BIT(l_pTxFlagData[1], 6)
#define l_flg_clr_TxCLM_ConsoleLampModuleVoltageStatus() LIN_CLEAR_BIT(l_pTxFlagData[1], 6)
#define l_flg_set_TxCLM_ConsoleLampModuleVoltageStatus() LIN_SET_BIT(l_pTxFlagData[1], 6)

#define l_flg_tst_changedCLM_ConsoleLampModuleVoltageStatus(ifc) LIN_TEST_CHANGED_FLAG_BIT(1, 5)
#define l_flg_set_changedCLM_ConsoleLampModuleVoltageStatus() LIN_SET_CHANGED_FLAG_BIT(1, 5)
#define l_flg_clr_changedCLM_ConsoleLampModuleVoltageStatus(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(1, 5)

/* flag access macros for signal CLM_ConsoleLampModuleVoltageStatus published by CLM*/
#define l_flg_clr_CLM_ConsoleLampModuleVoltageStatus() l_flg_clr_TxCLM_ConsoleLampModuleVoltageStatus()
#define l_flg_tst_CLM_ConsoleLampModuleVoltageStatus() l_flg_tst_TxCLM_ConsoleLampModuleVoltageStatus()

/* flag access macros for signal CLM_ConsoleLampModuleResponseError*/
#define l_flg_tst_LIN_FLAG_RxCLM_ConsoleLampModuleResponseError() l_flg_tst_RxCLM_ConsoleLampModuleResponseError()
#define l_flg_clr_LIN_FLAG_RxCLM_ConsoleLampModuleResponseError() l_flg_clr_RxCLM_ConsoleLampModuleResponseError()
#define l_flg_tst_LIN_FLAG_TxCLM_ConsoleLampModuleResponseError() l_flg_tst_TxCLM_ConsoleLampModuleResponseError()
#define l_flg_clr_LIN_FLAG_TxCLM_ConsoleLampModuleResponseError() l_flg_clr_TxCLM_ConsoleLampModuleResponseError()
#define l_flg_tst_RxCLM_ConsoleLampModuleResponseError() LIN_TEST_BIT(l_pRxFlagData[1], 7)
#define l_flg_clr_RxCLM_ConsoleLampModuleResponseError() LIN_CLEAR_BIT(l_pRxFlagData[1], 7)
#define l_flg_set_RxCLM_ConsoleLampModuleResponseError() LIN_SET_BIT(l_pRxFlagData[1], 7)
#define l_flg_tst_TxCLM_ConsoleLampModuleResponseError() LIN_TEST_BIT(l_pTxFlagData[1], 7)
#define l_flg_clr_TxCLM_ConsoleLampModuleResponseError() LIN_CLEAR_BIT(l_pTxFlagData[1], 7)
#define l_flg_set_TxCLM_ConsoleLampModuleResponseError() LIN_SET_BIT(l_pTxFlagData[1], 7)

#define l_flg_tst_changedCLM_ConsoleLampModuleResponseError(ifc) LIN_TEST_CHANGED_FLAG_BIT(1, 6)
#define l_flg_set_changedCLM_ConsoleLampModuleResponseError() LIN_SET_CHANGED_FLAG_BIT(1, 6)
#define l_flg_clr_changedCLM_ConsoleLampModuleResponseError(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(1, 6)

/* flag access macros for signal CLM_ConsoleLampModuleResponseError published by CLM*/
#define l_flg_clr_CLM_ConsoleLampModuleResponseError() l_flg_clr_TxCLM_ConsoleLampModuleResponseError()
#define l_flg_tst_CLM_ConsoleLampModuleResponseError() l_flg_tst_TxCLM_ConsoleLampModuleResponseError()

/* flag access macros for signal MasterReqB0*/
#define l_flg_tst_LIN_FLAG_RxMasterReqB0() l_flg_tst_RxMasterReqB0()
#define l_flg_clr_LIN_FLAG_RxMasterReqB0() l_flg_clr_RxMasterReqB0()
#define l_flg_tst_LIN_FLAG_TxMasterReqB0() l_flg_tst_TxMasterReqB0()
#define l_flg_clr_LIN_FLAG_TxMasterReqB0() l_flg_clr_TxMasterReqB0()
#define l_flg_tst_RxMasterReqB0() LIN_TEST_BIT(l_pRxFlagData[4], 1)
#define l_flg_clr_RxMasterReqB0() LIN_CLEAR_BIT(l_pRxFlagData[4], 1)
#define l_flg_set_RxMasterReqB0() LIN_SET_BIT(l_pRxFlagData[4], 1)
#define l_flg_tst_TxMasterReqB0() LIN_TEST_BIT(l_pTxFlagData[4], 1)
#define l_flg_clr_TxMasterReqB0() LIN_CLEAR_BIT(l_pTxFlagData[4], 1)
#define l_flg_set_TxMasterReqB0() LIN_SET_BIT(l_pTxFlagData[4], 1)

#define l_flg_tst_changedMasterReqB0(ifc) LIN_TEST_CHANGED_FLAG_BIT(3, 0)
#define l_flg_set_changedMasterReqB0() LIN_SET_CHANGED_FLAG_BIT(3, 0)
#define l_flg_clr_changedMasterReqB0(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(3, 0)

/* flag access macros for signal MasterReqB0 subscribed by CLM*/
#define l_flg_clr_MasterReqB0() l_flg_clr_RxMasterReqB0()
#define l_flg_tst_MasterReqB0() l_flg_tst_RxMasterReqB0()

/* flag access macros for signal MasterReqB1*/
#define l_flg_tst_LIN_FLAG_RxMasterReqB1() l_flg_tst_RxMasterReqB1()
#define l_flg_clr_LIN_FLAG_RxMasterReqB1() l_flg_clr_RxMasterReqB1()
#define l_flg_tst_LIN_FLAG_TxMasterReqB1() l_flg_tst_TxMasterReqB1()
#define l_flg_clr_LIN_FLAG_TxMasterReqB1() l_flg_clr_TxMasterReqB1()
#define l_flg_tst_RxMasterReqB1() LIN_TEST_BIT(l_pRxFlagData[4], 2)
#define l_flg_clr_RxMasterReqB1() LIN_CLEAR_BIT(l_pRxFlagData[4], 2)
#define l_flg_set_RxMasterReqB1() LIN_SET_BIT(l_pRxFlagData[4], 2)
#define l_flg_tst_TxMasterReqB1() LIN_TEST_BIT(l_pTxFlagData[4], 2)
#define l_flg_clr_TxMasterReqB1() LIN_CLEAR_BIT(l_pTxFlagData[4], 2)
#define l_flg_set_TxMasterReqB1() LIN_SET_BIT(l_pTxFlagData[4], 2)

#define l_flg_tst_changedMasterReqB1(ifc) LIN_TEST_CHANGED_FLAG_BIT(3, 1)
#define l_flg_set_changedMasterReqB1() LIN_SET_CHANGED_FLAG_BIT(3, 1)
#define l_flg_clr_changedMasterReqB1(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(3, 1)

/* flag access macros for signal MasterReqB1 subscribed by CLM*/
#define l_flg_clr_MasterReqB1() l_flg_clr_RxMasterReqB1()
#define l_flg_tst_MasterReqB1() l_flg_tst_RxMasterReqB1()

/* flag access macros for signal MasterReqB2*/
#define l_flg_tst_LIN_FLAG_RxMasterReqB2() l_flg_tst_RxMasterReqB2()
#define l_flg_clr_LIN_FLAG_RxMasterReqB2() l_flg_clr_RxMasterReqB2()
#define l_flg_tst_LIN_FLAG_TxMasterReqB2() l_flg_tst_TxMasterReqB2()
#define l_flg_clr_LIN_FLAG_TxMasterReqB2() l_flg_clr_TxMasterReqB2()
#define l_flg_tst_RxMasterReqB2() LIN_TEST_BIT(l_pRxFlagData[4], 3)
#define l_flg_clr_RxMasterReqB2() LIN_CLEAR_BIT(l_pRxFlagData[4], 3)
#define l_flg_set_RxMasterReqB2() LIN_SET_BIT(l_pRxFlagData[4], 3)
#define l_flg_tst_TxMasterReqB2() LIN_TEST_BIT(l_pTxFlagData[4], 3)
#define l_flg_clr_TxMasterReqB2() LIN_CLEAR_BIT(l_pTxFlagData[4], 3)
#define l_flg_set_TxMasterReqB2() LIN_SET_BIT(l_pTxFlagData[4], 3)

#define l_flg_tst_changedMasterReqB2(ifc) LIN_TEST_CHANGED_FLAG_BIT(3, 2)
#define l_flg_set_changedMasterReqB2() LIN_SET_CHANGED_FLAG_BIT(3, 2)
#define l_flg_clr_changedMasterReqB2(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(3, 2)

/* flag access macros for signal MasterReqB2 subscribed by CLM*/
#define l_flg_clr_MasterReqB2() l_flg_clr_RxMasterReqB2()
#define l_flg_tst_MasterReqB2() l_flg_tst_RxMasterReqB2()

/* flag access macros for signal MasterReqB3*/
#define l_flg_tst_LIN_FLAG_RxMasterReqB3() l_flg_tst_RxMasterReqB3()
#define l_flg_clr_LIN_FLAG_RxMasterReqB3() l_flg_clr_RxMasterReqB3()
#define l_flg_tst_LIN_FLAG_TxMasterReqB3() l_flg_tst_TxMasterReqB3()
#define l_flg_clr_LIN_FLAG_TxMasterReqB3() l_flg_clr_TxMasterReqB3()
#define l_flg_tst_RxMasterReqB3() LIN_TEST_BIT(l_pRxFlagData[4], 4)
#define l_flg_clr_RxMasterReqB3() LIN_CLEAR_BIT(l_pRxFlagData[4], 4)
#define l_flg_set_RxMasterReqB3() LIN_SET_BIT(l_pRxFlagData[4], 4)
#define l_flg_tst_TxMasterReqB3() LIN_TEST_BIT(l_pTxFlagData[4], 4)
#define l_flg_clr_TxMasterReqB3() LIN_CLEAR_BIT(l_pTxFlagData[4], 4)
#define l_flg_set_TxMasterReqB3() LIN_SET_BIT(l_pTxFlagData[4], 4)

#define l_flg_tst_changedMasterReqB3(ifc) LIN_TEST_CHANGED_FLAG_BIT(3, 3)
#define l_flg_set_changedMasterReqB3() LIN_SET_CHANGED_FLAG_BIT(3, 3)
#define l_flg_clr_changedMasterReqB3(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(3, 3)

/* flag access macros for signal MasterReqB3 subscribed by CLM*/
#define l_flg_clr_MasterReqB3() l_flg_clr_RxMasterReqB3()
#define l_flg_tst_MasterReqB3() l_flg_tst_RxMasterReqB3()

/* flag access macros for signal MasterReqB4*/
#define l_flg_tst_LIN_FLAG_RxMasterReqB4() l_flg_tst_RxMasterReqB4()
#define l_flg_clr_LIN_FLAG_RxMasterReqB4() l_flg_clr_RxMasterReqB4()
#define l_flg_tst_LIN_FLAG_TxMasterReqB4() l_flg_tst_TxMasterReqB4()
#define l_flg_clr_LIN_FLAG_TxMasterReqB4() l_flg_clr_TxMasterReqB4()
#define l_flg_tst_RxMasterReqB4() LIN_TEST_BIT(l_pRxFlagData[4], 5)
#define l_flg_clr_RxMasterReqB4() LIN_CLEAR_BIT(l_pRxFlagData[4], 5)
#define l_flg_set_RxMasterReqB4() LIN_SET_BIT(l_pRxFlagData[4], 5)
#define l_flg_tst_TxMasterReqB4() LIN_TEST_BIT(l_pTxFlagData[4], 5)
#define l_flg_clr_TxMasterReqB4() LIN_CLEAR_BIT(l_pTxFlagData[4], 5)
#define l_flg_set_TxMasterReqB4() LIN_SET_BIT(l_pTxFlagData[4], 5)

#define l_flg_tst_changedMasterReqB4(ifc) LIN_TEST_CHANGED_FLAG_BIT(3, 4)
#define l_flg_set_changedMasterReqB4() LIN_SET_CHANGED_FLAG_BIT(3, 4)
#define l_flg_clr_changedMasterReqB4(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(3, 4)

/* flag access macros for signal MasterReqB4 subscribed by CLM*/
#define l_flg_clr_MasterReqB4() l_flg_clr_RxMasterReqB4()
#define l_flg_tst_MasterReqB4() l_flg_tst_RxMasterReqB4()

/* flag access macros for signal MasterReqB5*/
#define l_flg_tst_LIN_FLAG_RxMasterReqB5() l_flg_tst_RxMasterReqB5()
#define l_flg_clr_LIN_FLAG_RxMasterReqB5() l_flg_clr_RxMasterReqB5()
#define l_flg_tst_LIN_FLAG_TxMasterReqB5() l_flg_tst_TxMasterReqB5()
#define l_flg_clr_LIN_FLAG_TxMasterReqB5() l_flg_clr_TxMasterReqB5()
#define l_flg_tst_RxMasterReqB5() LIN_TEST_BIT(l_pRxFlagData[4], 6)
#define l_flg_clr_RxMasterReqB5() LIN_CLEAR_BIT(l_pRxFlagData[4], 6)
#define l_flg_set_RxMasterReqB5() LIN_SET_BIT(l_pRxFlagData[4], 6)
#define l_flg_tst_TxMasterReqB5() LIN_TEST_BIT(l_pTxFlagData[4], 6)
#define l_flg_clr_TxMasterReqB5() LIN_CLEAR_BIT(l_pTxFlagData[4], 6)
#define l_flg_set_TxMasterReqB5() LIN_SET_BIT(l_pTxFlagData[4], 6)

#define l_flg_tst_changedMasterReqB5(ifc) LIN_TEST_CHANGED_FLAG_BIT(3, 5)
#define l_flg_set_changedMasterReqB5() LIN_SET_CHANGED_FLAG_BIT(3, 5)
#define l_flg_clr_changedMasterReqB5(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(3, 5)

/* flag access macros for signal MasterReqB5 subscribed by CLM*/
#define l_flg_clr_MasterReqB5() l_flg_clr_RxMasterReqB5()
#define l_flg_tst_MasterReqB5() l_flg_tst_RxMasterReqB5()

/* flag access macros for signal MasterReqB6*/
#define l_flg_tst_LIN_FLAG_RxMasterReqB6() l_flg_tst_RxMasterReqB6()
#define l_flg_clr_LIN_FLAG_RxMasterReqB6() l_flg_clr_RxMasterReqB6()
#define l_flg_tst_LIN_FLAG_TxMasterReqB6() l_flg_tst_TxMasterReqB6()
#define l_flg_clr_LIN_FLAG_TxMasterReqB6() l_flg_clr_TxMasterReqB6()
#define l_flg_tst_RxMasterReqB6() LIN_TEST_BIT(l_pRxFlagData[4], 7)
#define l_flg_clr_RxMasterReqB6() LIN_CLEAR_BIT(l_pRxFlagData[4], 7)
#define l_flg_set_RxMasterReqB6() LIN_SET_BIT(l_pRxFlagData[4], 7)
#define l_flg_tst_TxMasterReqB6() LIN_TEST_BIT(l_pTxFlagData[4], 7)
#define l_flg_clr_TxMasterReqB6() LIN_CLEAR_BIT(l_pTxFlagData[4], 7)
#define l_flg_set_TxMasterReqB6() LIN_SET_BIT(l_pTxFlagData[4], 7)

#define l_flg_tst_changedMasterReqB6(ifc) LIN_TEST_CHANGED_FLAG_BIT(3, 6)
#define l_flg_set_changedMasterReqB6() LIN_SET_CHANGED_FLAG_BIT(3, 6)
#define l_flg_clr_changedMasterReqB6(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(3, 6)

/* flag access macros for signal MasterReqB6 subscribed by CLM*/
#define l_flg_clr_MasterReqB6() l_flg_clr_RxMasterReqB6()
#define l_flg_tst_MasterReqB6() l_flg_tst_RxMasterReqB6()

/* flag access macros for signal MasterReqB7*/
#define l_flg_tst_LIN_FLAG_RxMasterReqB7() l_flg_tst_RxMasterReqB7()
#define l_flg_clr_LIN_FLAG_RxMasterReqB7() l_flg_clr_RxMasterReqB7()
#define l_flg_tst_LIN_FLAG_TxMasterReqB7() l_flg_tst_TxMasterReqB7()
#define l_flg_clr_LIN_FLAG_TxMasterReqB7() l_flg_clr_TxMasterReqB7()
#define l_flg_tst_RxMasterReqB7() LIN_TEST_BIT(l_pRxFlagData[5], 0)
#define l_flg_clr_RxMasterReqB7() LIN_CLEAR_BIT(l_pRxFlagData[5], 0)
#define l_flg_set_RxMasterReqB7() LIN_SET_BIT(l_pRxFlagData[5], 0)
#define l_flg_tst_TxMasterReqB7() LIN_TEST_BIT(l_pTxFlagData[5], 0)
#define l_flg_clr_TxMasterReqB7() LIN_CLEAR_BIT(l_pTxFlagData[5], 0)
#define l_flg_set_TxMasterReqB7() LIN_SET_BIT(l_pTxFlagData[5], 0)

#define l_flg_tst_changedMasterReqB7(ifc) LIN_TEST_CHANGED_FLAG_BIT(3, 7)
#define l_flg_set_changedMasterReqB7() LIN_SET_CHANGED_FLAG_BIT(3, 7)
#define l_flg_clr_changedMasterReqB7(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(3, 7)

/* flag access macros for signal MasterReqB7 subscribed by CLM*/
#define l_flg_clr_MasterReqB7() l_flg_clr_RxMasterReqB7()
#define l_flg_tst_MasterReqB7() l_flg_tst_RxMasterReqB7()

/* flag access macros for signal SlaveRespB0*/
#define l_flg_tst_LIN_FLAG_RxSlaveRespB0() l_flg_tst_RxSlaveRespB0()
#define l_flg_clr_LIN_FLAG_RxSlaveRespB0() l_flg_clr_RxSlaveRespB0()
#define l_flg_tst_LIN_FLAG_TxSlaveRespB0() l_flg_tst_TxSlaveRespB0()
#define l_flg_clr_LIN_FLAG_TxSlaveRespB0() l_flg_clr_TxSlaveRespB0()
#define l_flg_tst_RxSlaveRespB0() LIN_TEST_BIT(l_pRxFlagData[2], 1)
#define l_flg_clr_RxSlaveRespB0() LIN_CLEAR_BIT(l_pRxFlagData[2], 1)
#define l_flg_set_RxSlaveRespB0() LIN_SET_BIT(l_pRxFlagData[2], 1)
#define l_flg_tst_TxSlaveRespB0() LIN_TEST_BIT(l_pTxFlagData[2], 1)
#define l_flg_clr_TxSlaveRespB0() LIN_CLEAR_BIT(l_pTxFlagData[2], 1)
#define l_flg_set_TxSlaveRespB0() LIN_SET_BIT(l_pTxFlagData[2], 1)

#define l_flg_tst_changedSlaveRespB0(ifc) LIN_TEST_CHANGED_FLAG_BIT(2, 0)
#define l_flg_set_changedSlaveRespB0() LIN_SET_CHANGED_FLAG_BIT(2, 0)
#define l_flg_clr_changedSlaveRespB0(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(2, 0)

/* flag access macros for signal SlaveRespB0 published by CLM*/
#define l_flg_clr_SlaveRespB0() l_flg_clr_TxSlaveRespB0()
#define l_flg_tst_SlaveRespB0() l_flg_tst_TxSlaveRespB0()

/* flag access macros for signal SlaveRespB1*/
#define l_flg_tst_LIN_FLAG_RxSlaveRespB1() l_flg_tst_RxSlaveRespB1()
#define l_flg_clr_LIN_FLAG_RxSlaveRespB1() l_flg_clr_RxSlaveRespB1()
#define l_flg_tst_LIN_FLAG_TxSlaveRespB1() l_flg_tst_TxSlaveRespB1()
#define l_flg_clr_LIN_FLAG_TxSlaveRespB1() l_flg_clr_TxSlaveRespB1()
#define l_flg_tst_RxSlaveRespB1() LIN_TEST_BIT(l_pRxFlagData[2], 2)
#define l_flg_clr_RxSlaveRespB1() LIN_CLEAR_BIT(l_pRxFlagData[2], 2)
#define l_flg_set_RxSlaveRespB1() LIN_SET_BIT(l_pRxFlagData[2], 2)
#define l_flg_tst_TxSlaveRespB1() LIN_TEST_BIT(l_pTxFlagData[2], 2)
#define l_flg_clr_TxSlaveRespB1() LIN_CLEAR_BIT(l_pTxFlagData[2], 2)
#define l_flg_set_TxSlaveRespB1() LIN_SET_BIT(l_pTxFlagData[2], 2)

#define l_flg_tst_changedSlaveRespB1(ifc) LIN_TEST_CHANGED_FLAG_BIT(2, 1)
#define l_flg_set_changedSlaveRespB1() LIN_SET_CHANGED_FLAG_BIT(2, 1)
#define l_flg_clr_changedSlaveRespB1(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(2, 1)

/* flag access macros for signal SlaveRespB1 published by CLM*/
#define l_flg_clr_SlaveRespB1() l_flg_clr_TxSlaveRespB1()
#define l_flg_tst_SlaveRespB1() l_flg_tst_TxSlaveRespB1()

/* flag access macros for signal SlaveRespB2*/
#define l_flg_tst_LIN_FLAG_RxSlaveRespB2() l_flg_tst_RxSlaveRespB2()
#define l_flg_clr_LIN_FLAG_RxSlaveRespB2() l_flg_clr_RxSlaveRespB2()
#define l_flg_tst_LIN_FLAG_TxSlaveRespB2() l_flg_tst_TxSlaveRespB2()
#define l_flg_clr_LIN_FLAG_TxSlaveRespB2() l_flg_clr_TxSlaveRespB2()
#define l_flg_tst_RxSlaveRespB2() LIN_TEST_BIT(l_pRxFlagData[2], 3)
#define l_flg_clr_RxSlaveRespB2() LIN_CLEAR_BIT(l_pRxFlagData[2], 3)
#define l_flg_set_RxSlaveRespB2() LIN_SET_BIT(l_pRxFlagData[2], 3)
#define l_flg_tst_TxSlaveRespB2() LIN_TEST_BIT(l_pTxFlagData[2], 3)
#define l_flg_clr_TxSlaveRespB2() LIN_CLEAR_BIT(l_pTxFlagData[2], 3)
#define l_flg_set_TxSlaveRespB2() LIN_SET_BIT(l_pTxFlagData[2], 3)

#define l_flg_tst_changedSlaveRespB2(ifc) LIN_TEST_CHANGED_FLAG_BIT(2, 2)
#define l_flg_set_changedSlaveRespB2() LIN_SET_CHANGED_FLAG_BIT(2, 2)
#define l_flg_clr_changedSlaveRespB2(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(2, 2)

/* flag access macros for signal SlaveRespB2 published by CLM*/
#define l_flg_clr_SlaveRespB2() l_flg_clr_TxSlaveRespB2()
#define l_flg_tst_SlaveRespB2() l_flg_tst_TxSlaveRespB2()

/* flag access macros for signal SlaveRespB3*/
#define l_flg_tst_LIN_FLAG_RxSlaveRespB3() l_flg_tst_RxSlaveRespB3()
#define l_flg_clr_LIN_FLAG_RxSlaveRespB3() l_flg_clr_RxSlaveRespB3()
#define l_flg_tst_LIN_FLAG_TxSlaveRespB3() l_flg_tst_TxSlaveRespB3()
#define l_flg_clr_LIN_FLAG_TxSlaveRespB3() l_flg_clr_TxSlaveRespB3()
#define l_flg_tst_RxSlaveRespB3() LIN_TEST_BIT(l_pRxFlagData[2], 4)
#define l_flg_clr_RxSlaveRespB3() LIN_CLEAR_BIT(l_pRxFlagData[2], 4)
#define l_flg_set_RxSlaveRespB3() LIN_SET_BIT(l_pRxFlagData[2], 4)
#define l_flg_tst_TxSlaveRespB3() LIN_TEST_BIT(l_pTxFlagData[2], 4)
#define l_flg_clr_TxSlaveRespB3() LIN_CLEAR_BIT(l_pTxFlagData[2], 4)
#define l_flg_set_TxSlaveRespB3() LIN_SET_BIT(l_pTxFlagData[2], 4)

#define l_flg_tst_changedSlaveRespB3(ifc) LIN_TEST_CHANGED_FLAG_BIT(2, 3)
#define l_flg_set_changedSlaveRespB3() LIN_SET_CHANGED_FLAG_BIT(2, 3)
#define l_flg_clr_changedSlaveRespB3(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(2, 3)

/* flag access macros for signal SlaveRespB3 published by CLM*/
#define l_flg_clr_SlaveRespB3() l_flg_clr_TxSlaveRespB3()
#define l_flg_tst_SlaveRespB3() l_flg_tst_TxSlaveRespB3()

/* flag access macros for signal SlaveRespB4*/
#define l_flg_tst_LIN_FLAG_RxSlaveRespB4() l_flg_tst_RxSlaveRespB4()
#define l_flg_clr_LIN_FLAG_RxSlaveRespB4() l_flg_clr_RxSlaveRespB4()
#define l_flg_tst_LIN_FLAG_TxSlaveRespB4() l_flg_tst_TxSlaveRespB4()
#define l_flg_clr_LIN_FLAG_TxSlaveRespB4() l_flg_clr_TxSlaveRespB4()
#define l_flg_tst_RxSlaveRespB4() LIN_TEST_BIT(l_pRxFlagData[2], 5)
#define l_flg_clr_RxSlaveRespB4() LIN_CLEAR_BIT(l_pRxFlagData[2], 5)
#define l_flg_set_RxSlaveRespB4() LIN_SET_BIT(l_pRxFlagData[2], 5)
#define l_flg_tst_TxSlaveRespB4() LIN_TEST_BIT(l_pTxFlagData[2], 5)
#define l_flg_clr_TxSlaveRespB4() LIN_CLEAR_BIT(l_pTxFlagData[2], 5)
#define l_flg_set_TxSlaveRespB4() LIN_SET_BIT(l_pTxFlagData[2], 5)

#define l_flg_tst_changedSlaveRespB4(ifc) LIN_TEST_CHANGED_FLAG_BIT(2, 4)
#define l_flg_set_changedSlaveRespB4() LIN_SET_CHANGED_FLAG_BIT(2, 4)
#define l_flg_clr_changedSlaveRespB4(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(2, 4)

/* flag access macros for signal SlaveRespB4 published by CLM*/
#define l_flg_clr_SlaveRespB4() l_flg_clr_TxSlaveRespB4()
#define l_flg_tst_SlaveRespB4() l_flg_tst_TxSlaveRespB4()

/* flag access macros for signal SlaveRespB5*/
#define l_flg_tst_LIN_FLAG_RxSlaveRespB5() l_flg_tst_RxSlaveRespB5()
#define l_flg_clr_LIN_FLAG_RxSlaveRespB5() l_flg_clr_RxSlaveRespB5()
#define l_flg_tst_LIN_FLAG_TxSlaveRespB5() l_flg_tst_TxSlaveRespB5()
#define l_flg_clr_LIN_FLAG_TxSlaveRespB5() l_flg_clr_TxSlaveRespB5()
#define l_flg_tst_RxSlaveRespB5() LIN_TEST_BIT(l_pRxFlagData[2], 6)
#define l_flg_clr_RxSlaveRespB5() LIN_CLEAR_BIT(l_pRxFlagData[2], 6)
#define l_flg_set_RxSlaveRespB5() LIN_SET_BIT(l_pRxFlagData[2], 6)
#define l_flg_tst_TxSlaveRespB5() LIN_TEST_BIT(l_pTxFlagData[2], 6)
#define l_flg_clr_TxSlaveRespB5() LIN_CLEAR_BIT(l_pTxFlagData[2], 6)
#define l_flg_set_TxSlaveRespB5() LIN_SET_BIT(l_pTxFlagData[2], 6)

#define l_flg_tst_changedSlaveRespB5(ifc) LIN_TEST_CHANGED_FLAG_BIT(2, 5)
#define l_flg_set_changedSlaveRespB5() LIN_SET_CHANGED_FLAG_BIT(2, 5)
#define l_flg_clr_changedSlaveRespB5(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(2, 5)

/* flag access macros for signal SlaveRespB5 published by CLM*/
#define l_flg_clr_SlaveRespB5() l_flg_clr_TxSlaveRespB5()
#define l_flg_tst_SlaveRespB5() l_flg_tst_TxSlaveRespB5()

/* flag access macros for signal SlaveRespB6*/
#define l_flg_tst_LIN_FLAG_RxSlaveRespB6() l_flg_tst_RxSlaveRespB6()
#define l_flg_clr_LIN_FLAG_RxSlaveRespB6() l_flg_clr_RxSlaveRespB6()
#define l_flg_tst_LIN_FLAG_TxSlaveRespB6() l_flg_tst_TxSlaveRespB6()
#define l_flg_clr_LIN_FLAG_TxSlaveRespB6() l_flg_clr_TxSlaveRespB6()
#define l_flg_tst_RxSlaveRespB6() LIN_TEST_BIT(l_pRxFlagData[2], 7)
#define l_flg_clr_RxSlaveRespB6() LIN_CLEAR_BIT(l_pRxFlagData[2], 7)
#define l_flg_set_RxSlaveRespB6() LIN_SET_BIT(l_pRxFlagData[2], 7)
#define l_flg_tst_TxSlaveRespB6() LIN_TEST_BIT(l_pTxFlagData[2], 7)
#define l_flg_clr_TxSlaveRespB6() LIN_CLEAR_BIT(l_pTxFlagData[2], 7)
#define l_flg_set_TxSlaveRespB6() LIN_SET_BIT(l_pTxFlagData[2], 7)

#define l_flg_tst_changedSlaveRespB6(ifc) LIN_TEST_CHANGED_FLAG_BIT(2, 6)
#define l_flg_set_changedSlaveRespB6() LIN_SET_CHANGED_FLAG_BIT(2, 6)
#define l_flg_clr_changedSlaveRespB6(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(2, 6)

/* flag access macros for signal SlaveRespB6 published by CLM*/
#define l_flg_clr_SlaveRespB6() l_flg_clr_TxSlaveRespB6()
#define l_flg_tst_SlaveRespB6() l_flg_tst_TxSlaveRespB6()

/* flag access macros for signal SlaveRespB7*/
#define l_flg_tst_LIN_FLAG_RxSlaveRespB7() l_flg_tst_RxSlaveRespB7()
#define l_flg_clr_LIN_FLAG_RxSlaveRespB7() l_flg_clr_RxSlaveRespB7()
#define l_flg_tst_LIN_FLAG_TxSlaveRespB7() l_flg_tst_TxSlaveRespB7()
#define l_flg_clr_LIN_FLAG_TxSlaveRespB7() l_flg_clr_TxSlaveRespB7()
#define l_flg_tst_RxSlaveRespB7() LIN_TEST_BIT(l_pRxFlagData[3], 0)
#define l_flg_clr_RxSlaveRespB7() LIN_CLEAR_BIT(l_pRxFlagData[3], 0)
#define l_flg_set_RxSlaveRespB7() LIN_SET_BIT(l_pRxFlagData[3], 0)
#define l_flg_tst_TxSlaveRespB7() LIN_TEST_BIT(l_pTxFlagData[3], 0)
#define l_flg_clr_TxSlaveRespB7() LIN_CLEAR_BIT(l_pTxFlagData[3], 0)
#define l_flg_set_TxSlaveRespB7() LIN_SET_BIT(l_pTxFlagData[3], 0)

#define l_flg_tst_changedSlaveRespB7(ifc) LIN_TEST_CHANGED_FLAG_BIT(2, 7)
#define l_flg_set_changedSlaveRespB7() LIN_SET_CHANGED_FLAG_BIT(2, 7)
#define l_flg_clr_changedSlaveRespB7(ifc) LIN_CLEAR_CHANGED_FLAG_BIT(2, 7)

/* flag access macros for signal SlaveRespB7 published by CLM*/
#define l_flg_clr_SlaveRespB7() l_flg_clr_TxSlaveRespB7()
#define l_flg_tst_SlaveRespB7() l_flg_tst_TxSlaveRespB7()
/* flag access macros for frame CCU_2*/
#define l_flg_tst_LIN_FLAG_RxCCU_2() l_flg_tst_RxCCU_2()
#define l_flg_clr_LIN_FLAG_RxCCU_2() l_flg_clr_RxCCU_2()
#define l_flg_tst_LIN_FLAG_TxCCU_2() l_flg_tst_TxCCU_2()
#define l_flg_clr_LIN_FLAG_TxCCU_2() l_flg_clr_TxCCU_2()
#define l_flg_tst_RxCCU_2() LIN_TEST_BIT(l_pRxFlagData[0], 0)
#define l_flg_clr_RxCCU_2() LIN_CLEAR_BIT(l_pRxFlagData[0], 0)
#define l_flg_set_RxCCU_2() LIN_SET_BIT(l_pRxFlagData[0], 0)
#define l_flg_tst_TxCCU_2() LIN_TEST_BIT(l_pTxFlagData[0], 0)
#define l_flg_clr_TxCCU_2() LIN_CLEAR_BIT(l_pTxFlagData[0], 0)
#define l_flg_set_TxCCU_2() LIN_SET_BIT(l_pTxFlagData[0], 0)

/* flag access macros for frame CLM_1*/
#define l_flg_tst_LIN_FLAG_RxCLM_1() l_flg_tst_RxCLM_1()
#define l_flg_clr_LIN_FLAG_RxCLM_1() l_flg_clr_RxCLM_1()
#define l_flg_tst_LIN_FLAG_TxCLM_1() l_flg_tst_TxCLM_1()
#define l_flg_clr_LIN_FLAG_TxCLM_1() l_flg_clr_TxCLM_1()
#define l_flg_tst_RxCLM_1() LIN_TEST_BIT(l_pRxFlagData[1], 0)
#define l_flg_clr_RxCLM_1() LIN_CLEAR_BIT(l_pRxFlagData[1], 0)
#define l_flg_set_RxCLM_1() LIN_SET_BIT(l_pRxFlagData[1], 0)
#define l_flg_tst_TxCLM_1() LIN_TEST_BIT(l_pTxFlagData[1], 0)
#define l_flg_clr_TxCLM_1() LIN_CLEAR_BIT(l_pTxFlagData[1], 0)
#define l_flg_set_TxCLM_1() LIN_SET_BIT(l_pTxFlagData[1], 0)

/* flag access macros for frame SlaveResp*/
#define l_flg_tst_LIN_FLAG_RxSlaveResp() l_flg_tst_RxSlaveResp()
#define l_flg_clr_LIN_FLAG_RxSlaveResp() l_flg_clr_RxSlaveResp()
#define l_flg_tst_LIN_FLAG_TxSlaveResp() l_flg_tst_TxSlaveResp()
#define l_flg_clr_LIN_FLAG_TxSlaveResp() l_flg_clr_TxSlaveResp()
#define l_flg_tst_RxSlaveResp() LIN_TEST_BIT(l_pRxFlagData[2], 0)
#define l_flg_clr_RxSlaveResp() LIN_CLEAR_BIT(l_pRxFlagData[2], 0)
#define l_flg_set_RxSlaveResp() LIN_SET_BIT(l_pRxFlagData[2], 0)
#define l_flg_tst_TxSlaveResp() LIN_TEST_BIT(l_pTxFlagData[2], 0)
#define l_flg_clr_TxSlaveResp() LIN_CLEAR_BIT(l_pTxFlagData[2], 0)
#define l_flg_set_TxSlaveResp() LIN_SET_BIT(l_pTxFlagData[2], 0)

/* flag access macros for frame MasterReq*/
#define l_flg_tst_LIN_FLAG_RxMasterReq() l_flg_tst_RxMasterReq()
#define l_flg_clr_LIN_FLAG_RxMasterReq() l_flg_clr_RxMasterReq()
#define l_flg_tst_LIN_FLAG_TxMasterReq() l_flg_tst_TxMasterReq()
#define l_flg_clr_LIN_FLAG_TxMasterReq() l_flg_clr_TxMasterReq()
#define l_flg_tst_RxMasterReq() LIN_TEST_BIT(l_pRxFlagData[4], 0)
#define l_flg_clr_RxMasterReq() LIN_CLEAR_BIT(l_pRxFlagData[4], 0)
#define l_flg_set_RxMasterReq() LIN_SET_BIT(l_pRxFlagData[4], 0)
#define l_flg_tst_TxMasterReq() LIN_TEST_BIT(l_pTxFlagData[4], 0)
#define l_flg_clr_TxMasterReq() LIN_CLEAR_BIT(l_pTxFlagData[4], 0)
#define l_flg_set_TxMasterReq() LIN_SET_BIT(l_pTxFlagData[4], 0)



/* macro for setting error signals */
#define l_setErrorSignal() l_bool_wr_CLM_ConsoleLampModuleResponseError(1)
#endif /* LIN_CFG_H */
